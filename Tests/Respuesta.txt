
// La mayor ventaja que tiene el uso del fixture es el hecho de que
// no hace falta repetir lineas de codigo en las pruebas, al tener
// objetos predeterminados para ahcer las pruebas, no hace falta 
// inicializar cada objeto cada vez que inica una prueba

// Otra ventaja que tiene el uso del fixture es que hacegura que
// todas las pruebas puedan hacerse usando la misma configuracion
// y no objetos que puedan ser distintos de los usados antecedidas




// De alguna manera se estan usando ambos enfoques:

// Para todos los casos se está corroborando que las funciones reciban
// la entrada esperada y devuelvan el resultado correcto. 
// Esto implica un testing de caja negra.

// Por otro lado, las pruebas están hechas de manera que se verifica
// el fucnionamiento de cada posible camino dentro del codigo.
// Esto implica un conocimiento del codigo mas allá de las interfaces,
// lo que lo hace un testing de caja blanca.




// Setup seria la parte inicial del codigo de las pruebas.
// Incluye todas las configuraciones o inicializaciones necesarias
// para correr las pruebas.
// En este caso el setup se puede ver en Test_con_Mock en las lineas
//            var mockBuscadorProductos = new Mock<IBuscadorProductos>();
//            mockBuscadorProductos.Setup(b => b.BuscarProductoInterface("Laptop"))
//                                .Returns(new Producto { Nombre = "Laptop", Precio = 1000.0, Descripcion = "Una Laptop" });
// o en Test_Tienda en la inicializacion y uso del fixture

// Teardown se ejecuta despues de terminada cada prueba.
// Hace referencia al codigo que limpia las instancias creadas por setup.
// En este caso se puede ver con el uso de IDisposable aunque por la naturaleza
// de estas pruebas no se utiliza para mucho realmente.